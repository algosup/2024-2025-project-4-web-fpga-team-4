name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    branches: [ "main", "QA", "dev" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23.6.0' # You can specify the Node.js version you need

      # Install dependencies
      - name: Install dependencies
        run: |
          cd ./src/test
          npm install
          npm install typescript

      # Run the test command and capture output
      - name: Run tests
        id: run-tests
        run: |
          cd ./src/test
          npx tsc
          mkdir -p logs
          for file in *.js; do node "$file"; done
        continue-on-error: true # Allow the workflow to continue even if this step fails

      - name: Extract failed tests
        id: extract-failed-tests
        run: |
          # Extract failed tests from the ./src/test/logs/2025-03-12-test.json file
          FAILED_TESTS=$(cat ./src/test/logs/2025-03-12-test.json | jq -c '.results[] | select(.test.passed == false)')
          echo "::set-output name=failed_tests::$FAILED_TESTS"

      - name: Open issue
        if: ${{ steps.extract-failed-tests.outputs.failed_tests != '[]' }}
        uses: peter-evans/create-issue-from-file@v3
        with:
          title: "Failed Test: ${{ fromJson(steps.extract-failed-tests.outputs.failed_tests)[0].test.name }}"
          content-filepath: ./ISSUE_TEMPLATE.md
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create issue content
        if: ${{ steps.extract-failed-tests.outputs.failed_tests != '[]' }}
        run: |
          FAILED_TEST=${{ fromJson(steps.extract-failed-tests.outputs.failed_tests)[0] }}
          cat <<EOF > ISSUE_TEMPLATE.md
          ### Failed Test Details
          - **Browser:** ${FAILED_TEST.browser}
          - **Test Name:** ${FAILED_TEST.test.name}
          - **Description:** ${FAILED_TEST.test.description}
          - **Type:** ${FAILED_TEST.test.type}
          - **Error Code:** ${FAILED_TEST.test.error.code}
          - **Actual Value:** ${FAILED_TEST.test.error.actual}
          - **Expected Value:** ${FAILED_TEST.test.error.expected}
          - **Operator:** ${FAILED_TEST.test.error.operator}
          EOF