name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    branches: [ "main", "QA", "dev" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23.6.0' # You can specify the Node.js version you need

      # Install dependencies
      - name: Install dependencies
        run: |
          cd ./src/test
          npm install
          npm install typescript

      # Run the test command and capture output
      - name: Run tests
        id: run-tests
        run: |
          cd ./src/test
          npx tsc
          mkdir -p ../logs
          LOG_FILE="../logs/$(date +'%Y-%m-%d')-test.log"
          for file in *.js; do
            node "$file" >> "$LOG_FILE" 2>&1
          done
        continue-on-error: true # Allow the workflow to continue even if this step fails

      # Create a GitHub issue if tests fail
      - name: Create GitHub Issue on Test Failure
        if: steps.run-tests.outcome == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const date = new Date();
            const logFileName = date.toISOString().split(/T/)[0] + '-test.log';
            console.log(__dirname);
            const logFilePath = path.join('./logs', logFileName);
            const output = fs.readFileSync(logFilePath, 'utf8');

            const issueTitle = 'Test Failure in CI';
            const issueBody = `The tests in the CI workflow have failed. Please investigate and fix the issues.\n\nTest Output:\n\`\`\`\n${output}\n\`\`\``;

            const { data: issues } = await github.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['test-failure']
            });

            if (issues.some(issue => issue.title === issueTitle)) {
              console.log('Issue already exists.');
            } else {
              await github.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['test-failure']
              });
            }