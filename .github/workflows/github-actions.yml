name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    branches: [ "main", "QA", "dev" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '23.6.0' # You can specify the Node.js version you need

      # Install dependencies
      - name: Install dependencies
        run: |
          cd ./src/test
          npm install
          npm install typescript

      # Run the test command and capture output
      - name: Run tests
        id: run-tests
        run: |
          cd ./src/test
          npx tsc
          mkdir -p logs
          for file in *.js; do node "$file"; done
        continue-on-error: true # Allow the workflow to continue even if this step fails

      # Find the latest log file and create issues for test failures
      - name: Check for test failures and create issues
        run: |
          LOG_DIR="./src/test/logs/"
          
          # Find the latest .log file (sorted by modification time)
          LOG_FILE=$(ls -t "$LOG_DIR"*.log | head -n 1)

          if [ -f "$LOG_FILE" ]; then
            echo "Using latest log file: $LOG_FILE"

            grep -A 2 "FAILED" "$LOG_FILE" | while read -r line; do
              if echo "$line" | grep -q "FAILED"; then
                TITLE=$(echo "$PREV_LINE" | sed 's/^[0-9]\+\s*//')
                ERROR=$(echo "$line" | sed 's/FAILED//')

                curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/repos/${{ github.repository }}/issues \
                  -d "{\"title\": \"Test Failure: $TITLE\", \"body\": \"### Test failed: $TITLE\n\n$ERROR\"}"

              fi
              PREV_LINE="$line"
            done
          else
            echo "No log file found in $LOG_DIR"
          fi
